diff --git a/js/chroma.js b/js/chroma.js
index 9d73f86..63346be 100644
--- a/js/chroma.js
+++ b/js/chroma.js
@@ -1,83 +1,127 @@
 // Chroma Blaster by Richard Batista, April 2018
 
-var gameRules = [	"Blow up the UFOs before they blow up your ship!", 
-					"Aim and fire your laser to destroy the UFOs flying around you in space.", 
-					"Use lasers of a complimentary color to destroy:", 
-					"ðŸš€ Red destroys Cyan", 
-					"ðŸ›¸ Blue destroys Yellow", 
-					"ðŸ‘¾ Green destroys Magenta", 
-					"Using the wrong color will make them bigger.", 
-					"See how long you can last!", 
+var gameRules = [	"Blow up the UFOs before they blow up your ship!",
+					"Aim and fire your laser to destroy the UFOs flying around you in space.",
+					"Use lasers of a complimentary color to destroy:",
+					"ðŸš€ Red destroys Cyan",
+					"ðŸ›¸ Blue destroys Yellow",
+					"ðŸ‘¾ Green destroys Magenta",
+					"Using the wrong color will make them bigger.",
+					"See how long you can last!",
 					"User ARROW KEYS to move and Z, X, C to fire different colored lasers."];
 
 var Game = function(){
 	this.player = {};
 	this.ufo = [];
 	this.laser ={};
+	this.handleInput = function() {};
   }
-					
+
 window.onload = function() {
 	var currentGame;
 	canvas = document.getElementById("theCanvas")
 	ctx = canvas.getContext('2d');
-	// var player = new Player(300, 300);
-	var bgImage = new Image();
-	bgImage.src = "img/starfield.jpg";
-	ctx.drawImage(bgImage, 800, 1100);
+
 	startGame();
 }
 
+function drawRotated(image, locx, locy, angle, scale = 100)
+{
+	scaleFactor = 1.0 * (scale / 100);
+	width = image.width * scaleFactor;
+	height = image.height * scaleFactor;
+
+   ctx.save();
+   ctx.translate(locx, locy); // change origin
+   ctx.rotate((-1*angle) + (Math.PI/2));
+   ctx.drawImage(image,-0.5*width,-0.5*height,width,height);
+   ctx.restore();
+}
+
+function cleanDeadUFOS() {
+	arrayLen = currentGame.ufo.length;
+
+	for(i = 0; i < arrayLen; ++i)
+	{
+		if (currentGame.ufo[i].hit === true) {
+			currentGame.ufo.splice(i, 1);
+			arrayLen--;
+		}
+	}
+}
+
+// This is where the game updates player position, spawns enemies,
+// handles collisions, and computes physics
+function logicUpdate()
+{
+//	console.log("Player angle: " + ((360/(2*Math.PI))*currentGame.player.angle));
+//	console.log("Player velocity: " + currentGame.player.vx +","+currentGame.player.vy);
+//	console.log("Player accel: " + currentGame.player.acceleration);
+	currentGame.player.updatePhysics();
+
+	currentGame.ufo.forEach(function(oneUFO){
+		oneUFO.updatePhysics();
+	});
+
+	detectCollision();
+	cleanDeadUFOS();
+}
+
 function redrawBackground() {
 	var bgImage = new Image();
+	ctx.clearRect(0,0,1100,800);
 	bgImage.src = "img/starfield.jpg";
 }
 
-function refreshCanvas() {
-	setInterval(function(){
-		ctx.clearRect(0,0,1100,800);
-		redrawBackground();
-		currentGame.player.reDraw();
-		currentGame.ufo.forEach(function(oneUFO){
-			oneUFO.reDraw();
-			
-		});		//forEach
-		if(currentGame.laser.exists){
-			ctx.beginPath();
-			ctx.moveTo(currentGame.laser.x, currentGame.laser.y);
-			ctx.lineTo(currentGame.laser.endpointx, currentGame.laser.endpointy);
-			ctx.strokeStyle="red";
-			ctx.stroke();
-			ctx.closePath();
-			detectCollision();
-		}
+function redrawLaser()
+{
+	if(currentGame.laser.exists){
+		ctx.beginPath();
+		ctx.moveTo(currentGame.laser.x, currentGame.laser.y);
+		ctx.lineTo(currentGame.laser.endpointx, currentGame.laser.endpointy);
+		ctx.strokeStyle="red";
+		ctx.stroke();
+		ctx.closePath();
+	}
+}
+
+function redrawEverything()
+{
+	redrawBackground();
+	currentGame.player.reDraw();
 
+	currentGame.ufo.forEach(function(oneUFO){
+		oneUFO.reDraw();
+	});
 
-	}, 100);	//setInverval
+	redrawLaser();
 }
 
+
 var canStart = true;
 
 function startGame() {
 	if(canStart) {
 		currentGame = new Game();
-		// var Player = function(x, y, vx, vy, direction, image, rLaserLevel, gLaserLevel, bLaserLevel)
-		var player = new Player(canvas.width / 2, canvas.height / 2, 0, 0, "N", "img/player-n.png", 10, 10, 10);
+		var player = new Player(canvas.width / 2, canvas.height / 2, 0, Math.PI/2,
+			"img/player-n.png", 10, 10, 10);
+
 		currentGame.player = player;
-		// spawnUFO();
-		currentGame.player.draw();
-		document.onkeydown = function(e) { currentGame.player.move(e); };
-	}
 
-	setInterval(function(){
-		spawnUFO();
-	},1000)
+		// Draw the player for the first time
+		//currentGame.player.draw();
 
-	refreshCanvas();
-}
+		// Process Input
+		currentGame.handleInput = function(event) {
+			currentGame.player.handleInput(event);
+		}
+		document.onkeydown = currentGame.handleInput;
 
-// 	currentGame.ufo.forEach(function(oneUFO){
-// 		oneUFO.moveAround();
-// 	});	
+		// Update - Respond to Input & Produce Enemies
+		setInterval(spawnUFO, 1000);
+		setInterval(logicUpdate,(1000.0/60));
 
-// 	refreshCanvas();
-// }
+		// Render the changes
+		setInterval(redrawEverything, (1000.0/60));
+	}
+}
diff --git a/js/sprites.js b/js/sprites.js
index 335c23a..86b893b 100644
--- a/js/sprites.js
+++ b/js/sprites.js
@@ -7,246 +7,129 @@ var Sprite = function(x, y, vx, vy, image) {
 }
 
 var enableMovement = true;
-var playerSpeed = 15;
-var playerImage = new Image();
-var Player = function(x, y, vx, vy, direction, image, rLaserLevel, gLaserLevel, bLaserLevel, hit, laserFired) {
+
+
+var Player = function(x, y, velocity, angle, imagePath, rLaserLevel, gLaserLevel, bLaserLevel, hit, laserFired) {
+	vx = 0;
+	vy = 0;
 	Sprite.call(this, x, y, vx, vy);
-	this.direction = direction;
-	this.image = image;
+
+	this.playerImage = new Image();
+	this.playerImage.src = imagePath;
+	this.angle = angle;
+	this.velocity = velocity;
+	this.acceleration = 0;
 	this.rLaserLevel = rLaserLevel;
 	this.gLaserLevel = gLaserLevel;
 	this.bLaserLevel = bLaserLevel;
 }
 
+
 Player.prototype = Object.create(Sprite.prototype);
 Player.prototype.constructor = Player;
-Player.prototype.draw = function() {
-	playerImage.src = currentGame.player.image;
-	console.log(this.x, this.y);
 
-	var that = this;
 
-	playerImage.onload = function() {
-		ctx.drawImage(playerImage, that.x, that.y, 85, 85);
-	}
-}
 Player.prototype.reDraw = function() {
-	ctx.drawImage(playerImage, this.x, this.y, 85, 85);
+
+	var centerx = canvas.width / 2 - 42.5;
+	var centery = canvas.height / 2 - 42.5;
+
+/*	ctx.save();
+	ctx.clearRect(0,0,canvas.width,canvas.height);
+	ctx.drawImage(this.playerImage, centerx, centery);
+	ctx.translate(canvas.width/2,canvas.height/2);
+	ctx.rotate(this.angle *  Math.PI/180);
+	ctx.drawImage(this.playerImage,-this.playerImage.width/2,-this.playerImage.width/2);
+	ctx.restore(); */
+
+	drawRotated(this.playerImage, this.x, this.y, this.angle);
+	//ctx.drawImage(this.playerImage, this.x, this.y, 85, 85);
 }
-Player.prototype.move = function(e) {
-	e.preventDefault();
 
-	if(enableMovement) {
+Player.prototype.handleInput = function(event) {
+	event.preventDefault();
 
-		if(e.keyCode === 38) { // Up Arrow
+	if(enableMovement) {
+		if(event.keyCode === 38) { // Up Arrow
 			console.log("Up Arrow!");
-			switch(this.direction) {
-				case "N":
-					this.y -= playerSpeed;
-					break;
-				case "NE":
-					this.x += playerSpeed;
-					this.y -= playerSpeed;
-					break;
-				case "E":
-					this.x += playerSpeed;
-					break;
-				case "SE":
-					this.x += playerSpeed;
-					this.y += playerSpeed;
-					break;
-				case "S":
-					this.y += playerSpeed;
-					break;
-				case "SW":
-					this.x -= playerSpeed;
-					this.y += playerSpeed;
-					break;
-				case "W":
-					this.x -= playerSpeed;
-					break;
-				case "NW":
-					this.x -= playerSpeed;
-					this.y -= playerSpeed;
-					break;
-			}
-		} 
+			this.acceleration = 2;
+		}
 
-		if(e.keyCode === 37) { // Left Arrow
+		if(event.keyCode === 37) { // Left Arrow, counterclockwise
+			this.angle = (this.angle + Math.PI/4) % (2*Math.PI); // +5 degrees in radians
 			console.log("Left Arrow!")
-			switch(this.direction) {
-				case "N":
-					this.direction = "NW";
-					playerImage.src = "img/player-nw.png";
-					break;
-				case "NE":
-					this.direction = "N";
-					playerImage.src = "img/player-n.png";
-					break;
-				case "E":
-					this.direction = "NE";
-					playerImage.src = "img/player-ne.png";
-					break;
-				case "SE":
-					this.direction = "E";
-					playerImage.src = "img/player-e.png";
-					break;
-				case "S":
-					this.direction = "SE";
-					playerImage.src = "img/player-se.png";
-					break;
-				case "SW":
-					this.direction = "S";
-					playerImage.src = "img/player-s.png";
-					break;
-				case "W":
-					this.direction = "SW";
-					playerImage.src = "img/player-sw.png";
-					break;
-				case "NW":
-					this.direction = "W";
-					playerImage.src = "img/player-w.png";
-					break;
-			}
 		}
 
-		if(e.keyCode === 39) { // Right Arrow
+		if(event.keyCode === 39) { // Right Arrow
 			console.log("Right Arrow!")
-			switch(this.direction) {
+			this.angle =  (this.angle - Math.PI/4) % (2*Math.PI); // -5 degrees in radians
+		}
+			/* switch(this.angle) {
 				case "N":
-					this.direction = "NE";
-					playerImage.src = "img/player-ne.png";
+					this.angle = "NE";
+					playerImage.src = "img/player-nevent.png";
 					break;
 				case "NE":
-					this.direction = "E";
-					playerImage.src = "img/player-e.png";
+					this.angle = "E";
+					playerImage.src = "img/player-event.png";
 					break;
 				case "E":
-					this.direction = "SE";
-					playerImage.src = "img/player-se.png";
+					this.angle = "SE";
+					playerImage.src = "img/player-sevent.png";
 					break;
 				case "SE":
-					this.direction = "S";
+					this.angle = "S";
 					playerImage.src = "img/player-s.png";
 					break;
 				case "S":
-					this.direction = "SW";
+					this.angle = "SW";
 					playerImage.src = "img/player-sw.png";
 					break;
 				case "SW":
-					this.direction = "W";
+					this.angle = "W";
 					playerImage.src = "img/player-w.png";
 					break;
 				case "W":
-					this.direction = "NW";
+					this.angle = "NW";
 					playerImage.src = "img/player-nw.png";
 					break;
 				case "NW":
-					this.direction = "N";
+					this.angle = "N";
 					playerImage.src = "img/player-n.png";
 					break;
 			}
-		}
+		} */
 
-		if(e.keyCode === 90) { // fire red
+		if(event.keyCode === 90) { // fire red
+
+			playerX = currentGame.player.x;
+			playerY = currentGame.player.y;
+
+			laserLength = 125;
+
+			// Endpoint x and y offsets
+			lx = laserLength * Math.cos(currentGame.player.angle);
+			ly = laserLength * Math.sin(currentGame.player.angle);
 
 			currentGame.laser = { exists: true };
-		
-			console.log(currentGame);
-			switch(this.direction) {
-				case "N":
-					currentGame.laser.x = currentGame.player.x + 42.5;
-					currentGame.laser.y = currentGame.player.y + 0;
-					currentGame.laser.endpointx = currentGame.player.x + 0 + 42.5;
-					currentGame.laser.endpointy = currentGame.player.y - 125 + 0;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x + 0, currentGame.player.y - 25);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-				case "NE":
-					currentGame.laser.x = currentGame.player.x + 85;
-					currentGame.laser.y = currentGame.player.y + 0;
-					currentGame.laser.endpointx = currentGame.player.x + 125 + 85;
-					currentGame.laser.endpointy = currentGame.player.y - 125 + 0;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x + 25, currentGame.player.y - 25);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-				case "E":
-					currentGame.laser.x = currentGame.player.x + 85;
-					currentGame.laser.y = currentGame.player.y + 42.5;
-					currentGame.laser.endpointx = currentGame.player.x + 125 + 85;
-					currentGame.laser.endpointy = currentGame.player.y + 0 + 42.5;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x + 25, currentGame.player.y + 0);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-				case "SE":
-					currentGame.laser.x = currentGame.player.x + 85;
-					currentGame.laser.y = currentGame.player.y + 85;
-					currentGame.laser.endpointx = currentGame.player.x + 125 + 85;
-					currentGame.laser.endpointy = currentGame.player.y + 125 + 85;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x + 25, currentGame.player.y +25);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-				case "S":
-					currentGame.laser.x = currentGame.player.x + 42.5;
-					currentGame.laser.y = currentGame.player.y + 85;
-					currentGame.laser.endpointx = currentGame.player.x + 0 + 42.5;
-					currentGame.laser.endpointy = currentGame.player.y + 125 + 85;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x + 0, currentGame.player.y + 25);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-				case "SW":
-					currentGame.laser.x = currentGame.player.x + 0;
-					currentGame.laser.y = currentGame.player.y + 85;
-					currentGame.laser.endpointx = currentGame.player.x - 125 + 0;
-					currentGame.laser.endpointy = currentGame.player.y + 125 + 85;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x - 25, currentGame.player.y + 25);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-				case "W":
-					currentGame.laser.x = currentGame.player.x + 0;
-					currentGame.laser.y = currentGame.player.y + 42.5;
-					currentGame.laser.endpointx = currentGame.player.x - 125 + 0;
-					currentGame.laser.endpointy = currentGame.player.y + 0 + 42.5;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x + 25, currentGame.player.y + 0);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-				case "NW":
-					currentGame.laser.x = currentGame.player.x + 0;
-					currentGame.laser.y = currentGame.player.y + 0;
-					currentGame.laser.endpointx = currentGame.player.x - 125 + 0;
-					currentGame.laser.endpointy = currentGame.player.y - 125 + 0;
-					// ctx.moveTo(currentGame.player.x, currentGame.player.y);
-					// ctx.lineTo(currentGame.player.x - 25, currentGame.player.y - 25);
-					// ctx.strokeStyle="red";
-					// ctx.stroke();
-					break;
-			}
+
+			currentGame.laser.y = playerY;
+			currentGame.laser.x = playerX;
+
+			currentGame.laser.endpointy = playerY - ly;
+			currentGame.laser.endpointx = playerX + lx;
 
 			setTimeout(function(){
 				currentGame.laser.exists = false;
 			},400)
 		}
 
-		if(e.keyCode === 88) { //fire green
-			
+		if(event.keyCode === 88) { //fire green
+
 		}
 
-		if(e.keyCode === 67) { //fire blue
-			
+		if(event.keyCode === 67) { //fire blue
+
 		}
 
 		console.log(this.x, this.y);
@@ -254,24 +137,41 @@ Player.prototype.move = function(e) {
 	}
 }
 
-var UFO = function(x, y, vx, vy, image, color, direction, hit) {
-	Sprite.call(this, x, y, vx, vy, image);
+Player.prototype.updatePhysics = function() {
+	if (this.acceleration != 0) {
+		this.vy += this.acceleration * Math.sin(this.angle);
+		this.vx += this.acceleration * Math.cos(this.angle);
+		this.acceleration = 0;
+	}
+
+	this.x += this.vx;
+	this.y -= this.vy;
+}
+
+var UFO = function(x, y, vx, vy, imagePath, color, angle = 0, hit) {
+	Sprite.call(this, x, y, vx, vy, imagePath);
 	this.color = color;
-	this.image = image;
-	this.direction = direction;
-}	
+	this.image = new Image();
+	this.image.src = imagePath;
+	this.angle = angle;
+	this.hit = false;
+}
 UFO.prototype = Object.create(Sprite.prototype);
 UFO.prototype.constructor = UFO;
 
+UFO.prototype.updatePhysics = function() {
+	this.angle += (Math.PI/64) % (2*Math.PI);
+}
 UFO.prototype.reDraw = function() {
-	var theImage = new Image();
-	theImage.src = this.image;
-	ctx.drawImage(theImage, this.x, this.y, 85, 85);
+	///console.log("ufo.prototype.reDraw was called ðŸ˜ˆ");
+
+	drawRotated(this.image, this.x, this.y, this.angle, 80);
+	//ctx.drawImage(image, this.x, this.y, 85, 85);
 }
 
 // UFO.prototype.moveAround = function() {
 // 	var randomDirectionSeed = 3;
-	
+
 // 	setInterval(function() {
 // 		randomDirectionSeed = Math.floor(Math.random() * 8);
 // 	},2000);
@@ -309,6 +209,7 @@ UFO.prototype.reDraw = function() {
 // }
 
 var index = 0;
+
 function spawnUFO() {
 	// var index = 0;
 	var randomX = Math.floor(Math.random() * canvas.width);
@@ -319,15 +220,15 @@ function spawnUFO() {
 
 	switch(randomColorSeed) {
 		case 0:
-			var image = "img/ufo-cyan.png";
+			image = "img/ufo-cyan.png";
 			var color = "cyan";
 			break;
 		case 1:
-			var image = "img/ufo-magenta.png"
+			image = "img/ufo-magenta.png"
 			var color = "magenta";
 			break;
 		case 2:
-			var image = "img/ufo-yellow.png"
+			image = "img/ufo-yellow.png"
 			var color = "yellow";
 			break;
 		default:
@@ -335,7 +236,9 @@ function spawnUFO() {
 			break;
 	}
 //	var UFO = function(x, y, vx, vy, image, color)
-	currentGame.ufo.push(new UFO(randomX, randomY, 0, 0, image, color));
+	if (currentGame.ufo.length < 10) {
+		currentGame.ufo.push(new UFO(randomX, randomY, 0, 0, image, color));
+	}
 // 	console.log(index);
 // 	currentGame.ufo[index].moveAround();
 // 	index++;
@@ -362,8 +265,8 @@ function spawnUFO() {
 // 			console.log("Uh oh.");
 // 			break;
 // 	}
-	
-// 	function draw(x, y, degrees) {	
+
+// 	function draw(x, y, degrees) {
 
 // 		ctx.translate(x + image.width / 2, y + image.height / 2);
 // 		ctx.rotate(degrees * Math.PI / 180);
@@ -389,20 +292,53 @@ function spawnUFO() {
 // 	// ====================================================================================
 // };
 
+
+function distanceToPoint(x1,y1,x2,y2)
+{
+	var xdiff = Math.pow(x2-x1,2);
+	var ydiff = Math.pow(y2-y1,2);
+
+	return Math.sqrt(xdiff + ydiff);
+}
+
 function detectCollision() {
 	currentGame.ufo.forEach(function(oneUFO) {
-		if (((oneUFO.x + 62.5) - (currentGame.player.x + 42.5) <= 40 && 
+		if (((oneUFO.x + 62.5) - (currentGame.player.x + 42.5) <= 40 &&
 			(oneUFO.y + 62.5) - (currentGame.player.y + 42.5) <= 40)) {
 				currentGame.player.hit = true;
 			};
-		if (currentGame.laser.exists = true && 
+
+		// laser colissions
+		if (currentGame.laser.exists === true) {
+			ufoRadius = oneUFO.image.width / 2;
+			console.log("radius: " + ufoRadius);
+			console.log("Im a survivor");
+			
+			var theDistance = distanceToPoint(currentGame.laser.x, oneUFO.x,
+				                currentGame.laser.y, oneUFO.y) ;
+
+			console.log("ðŸ”«1: " + theDistance);
+			if (theDistance < 50)
+			{
+				oneUFO.hit = true;
+			}
+			theDistance = distanceToPoint(currentGame.laser.x, oneUFO.x,
+				                currentGame.laser.y, oneUFO.y)
+
+			console.log("ðŸ”«2: " + theDistance);
+			if (theDistance < 50)
+			{
+				oneUFO.hit = true;
+			}
+		}
+
+		/*if (currentGame.laser.exists === true &&
 			(((oneUFO.x + 62.5) - (currentGame.player.x + 42.5)) <= 124 && ((oneUFO.y + 62.5) - (currentGame.player.y + 42.5)) <= 124) ||
 			(((currentGame.player.x + 42.5) - (oneUFO.x + 42.5)) <= 124 && ((currentGame.player.y + 42.5) - (oneUFO.y + 62.5)) <= 124)) {
 				oneUFO.hit = true;
-			};
-		if (oneUFO.hit === true) { oneUFO.image = "img/blank.png"; };
-		// if (currentGame.player.hit = true) { 
+			}; */
+		// if (currentGame.player.hit = true) {
 			// enableMovement = false;
 			// playerImage.src = "img/mindblown.png"; };
 	});
-};
\ No newline at end of file
+};
